# -*- coding: utf-8 -*-
"""data_quality_check.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18fB28uUmyw17qLwA3GkP22VBnGklwDzK
"""

import pandas as pd
import numpy as np
import google.generativeai as genai
from google.colab import files

uploaded = files.upload()
print(uploaded)

file_name = list(uploaded.keys())[0]
df=pd.read_excel(file_name)
df_q=df.copy()
print("Shape:", df_q.shape)
df_q.head()

# 1. Accuracy (LLM check: inactive company with revenue)
import os
os.environ["GOOGLE_API_KEY"] = ""
genai.configure(api_key=os.environ["GOOGLE_API_KEY"])
def gemini_accuracy_check(row):
    if row["operationstatustype"] == "INACTIVE" and pd.notnull(row["REVENUE"]) and row["REVENUE"] > 0:
        prompt = f"""
        A company named "{row['companynameofficial']}" is marked as INACTIVE
        but reports revenue of {row['REVENUE']} {row['unit_REVENUE']} in {row['timevalue']}.
        Is this plausible? Answer only YES or NO.
        """
        try:
            model = genai.GenerativeModel("gemini-1.5-flash")
            response = model.generate_content(prompt)
            answer = response.text.strip().upper()
            return True if "NO" in answer else False
        except Exception as e:
            print("Gemini error:", e)
            return None
    return False

df_q["flag_llm_accuracy"]=df_q.apply(gemini_accuracy_check,axis=1)
df_q.head()

# 2. Completeness Check
df_q["flag_missing"]=df_q.isnull().any(axis=1)
df_q.head()

# 3. Consistency Check
import re

def check_consistency(row):
    if pd.notnull(row["REVENUE"]) and pd.isnull(row["unit_REVENUE"]):
        return True

    fiscal = str(row["fiscalperiodend"])
    if not re.match(r"^\d{1,2}-[A-Za-z]{3}$", fiscal):
        return True

    try:
        pd.to_datetime(f"{fiscal}-{int(row['timevalue'])}", format="%d-%b-%Y")
    except Exception:
        return True

    return False

df_q["flag_consistency"] = df_q.apply(check_consistency, axis=1)

# 4. Timeliness Check
current_year = pd.Timestamp.today().year
df_q["flag_timeliness"] = df_q["timevalue"].apply(
    lambda x: x < 1900 or x > current_year
)

# 5. Uniqueness Check
df_q["flag_uniqueness"] = df_q.duplicated(
    subset=["companynameofficial", "timevalue"], keep=False
)

output_file = "CaseStudy_Quality_sample25_flagged.xlsx"
df_q.to_excel(output_file, index=False)

files.download(output_file)

import matplotlib.pyplot as plt

# Count issues per metric
issue_counts = {
    "Accuracy": df_q["flag_llm_accuracy"].sum(),
    "Completeness": df_q["flag_missing"].sum(),
    "Consistency": df_q["flag_consistency"].sum(),
    "Timeliness": df_q["flag_timeliness"].sum(),
    "Uniqueness": df_q["flag_uniqueness"].sum()
}

# Display table
summary_df = pd.DataFrame(list(issue_counts.items()), columns=["Metric", "Issue_Count"])
display(summary_df)

# Plot bar chart
plt.bar(summary_df["Metric"], summary_df["Issue_Count"])
plt.title("Data Quality Issues by Metric")
plt.xticks(rotation=45)
plt.ylabel("Number of Issues")
plt.show()